"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stopwatch = void 0;
const perf_hooks_1 = require("perf_hooks");
/**
 * Klasa's Stopwatch class, uses native node to replicate/extend performance now dependency.
 */
class Stopwatch {
    /**
     * Starts a new stopwatch
     */
    constructor(digits = 2) {
        this.digits = digits;
        this._start = perf_hooks_1.performance.now();
        this._end = null;
    }
    /**
     * The duration of this stopwatch since start or start to end if this stopwatch has stopped.
     */
    get duration() {
        return this._end ? this._end - this._start : perf_hooks_1.performance.now() - this._start;
    }
    /**
     * If the stopwatch is running or not.
     */
    get running() {
        return Boolean(!this._end);
    }
    /**
     * Restarts the stopwatch (Returns a running state)
     */
    restart() {
        this._start = perf_hooks_1.performance.now();
        this._end = null;
        return this;
    }
    /**
     * Resets the Stopwatch to 0 duration (Returns a stopped state)
     */
    reset() {
        this._start = perf_hooks_1.performance.now();
        this._end = this._start;
        return this;
    }
    /**
     * Starts the Stopwatch
     */
    start() {
        if (!this.running) {
            this._start = perf_hooks_1.performance.now() - this.duration;
            this._end = null;
        }
        return this;
    }
    /**
     * Stops the Stopwatch, freezing the duration
     */
    stop() {
        if (this.running)
            this._end = perf_hooks_1.performance.now();
        return this;
    }
    /**
     * Defines toString behavior
     */
    toString() {
        const time = this.duration;
        if (time >= 1000)
            return `${(time / 1000).toFixed(this.digits)}s`;
        if (time >= 1)
            return `${time.toFixed(this.digits)}ms`;
        return `${(time * 1000).toFixed(this.digits)}Î¼s`;
    }
}
exports.Stopwatch = Stopwatch;
//# sourceMappingURL=index.js.map